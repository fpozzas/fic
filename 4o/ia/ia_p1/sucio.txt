RESUMEN
En esta práctica se tratará de proponer soluciones para un simple juego recreativo que consiste en partir de un número de tres cifras y, mediante incrementos y decrementos de sus digitos, llegar a un número meta teniendo en cuenta una serie de restricciones. Se considerarán distintos algoritmos de búsqueda ciega e informada, se evaluarán y se extraerán las conclusiones pertinentes.

CONTENIDO

DEFINICIONES FORMALES

Estado inicial: puede ser cualquier combinación de tres cifras excluyendo los números prohibidos.
Estado meta: una combinación de tres cifras que no debe estar en el conjunto de los números prohibidos.
Representación de estados: el número se representará por un vector de tres posiciones de números enteros. Por ejemplo, para el número 748 tendremos que 
	V(1) = 7 ; V(2) = 4 ; V(3) = 8
Conjunto de operadores y restricciones: se trata de definir operaciones tales que cumplan con las restricciones dadas en el enunciado.

INC1
Precondiciones:
V(1)<9 AND
V(1)=V''(1) AND
(V(1)+1)*100+V(2)*10+V(3)) no exista en el conjunto de los números prohibidos. 
Resultado:
V'(1)=V'(1)+1
Comentario:
Incrementar centenas.

DEC1
Precondiciones:
V(1)>0 AND
V(1)=V''(1) AND
(V(1)-1)*100+V(2)*10+V(3)) no exista en el conjunto de los números prohibidos.
Resultado:
V'(1)=V'(1)-1
Comentario:
Decrementar centenas.

Donde V es el estado actual, V'' es el antecesor y el V' es el sucesor.

Prueba de meta: comprobamos si el vector coincide dígito a dígito con el número meta.
Función de coste: es 1 para todas las operaciones, por lo que el coste total del camino para una solución es el número de operaciones invertidas.

ANÁLISIS DE MÉTODOS DE BÚSQUEDA CIEGA
Para ello analizaremos distintos factores que influiran en la decisión de elegir entre busqueda ciega por anchura o por profundidad: gasto de memoria, tiempo de proceso, optimalidad y completitud.

MEMORIA
El número de estados total a priori sería el rango de enteros de entre 0 y 999, es decir, 1000 estados posibles. Sin embargo, debemos tener en cuenta la restricción de que no podemos modificar un dígito dos veces consecutivas, por lo que en cada estado tendremos que tener un método de saber cual ha sido el dígito modificado anteriormente. En una primera aproximación podemos pensar en añadir una variable adicional al estado en la que se indica el dígito modificado. Así pues el número de estados a considerar sería de 4 x 1000, donde el el estado estaría representado por un vector de cuatro enteros donde los tres primeros son el número y el cuarto es otro entero que se corresponde con el dígito modificado.
Otra forma de implementar esto sería asegurarse de que el estado actual tenga un puntero al estado anterior y así poder obtener su número y saber cual es el dígito que se ha modificado. Con esto sólo necesitamos un vector de tres enteros en vez de los cuatro de la anterior solución, ya que en busqueda ciega se suele mantener un puntero de un estado hacia su padre ya en el algoritmo y no se necesitaría guardarlo de forma explícita. Este "ahorro" de un entero en memoria puede parecer pequeño pero es vital para algorimos exponenciales como anchura.

OPTIMALIDAD
Esta característica poco tiene que ver con este caso particular sino por la implementación de los algoritmos de búsqueda que nos ocupan. En anchura se exploran todos los posibles caminos desde el comienzo del algoritmo, por lo que en el momento en el que encuentre una primera solución ese camino será óptimo. Sin embargo en profundidad si se encuentra una solución no podemos afirmar que será óptima ya que por la implementación del algoritmo es posible que se diera un rodeo para llegar a esa solución.

FACTOR DE RAMIFICACIÓN
El factor de ramificación es por definición el número medio de estados posibles que pueden derivar de cada una de las configuraciones. Esto es importante ya que nos ayuda a saber el espacio que ocupara la buqueda en anchura. Suponiendo que todas las posibles configuraciones son equiprobables, que no tenemos en cuenta números prohibidos y que descartaremos un movimiento por la restricción de no modificar un digito dos veces consecutivas:

Caso 1: Los tres dígitos son 0 o 9
000,999,900,909,990,099,090,009
(Variaciones con repeticion de 2 elementos tomados de 3 en 3)
2 movimientos * 2^3 = 2 * 8 = 16

Caso 2: Dos dígitos son 0 o 9 y uno es 0<x<9
00x,0x0,x00,99x,9x9,x99,90x,09x,9x0,0x9,x90,x09
(Variaciones con repeticion de 2 elementos tomados de 2 en 2 por 3 casos)
Supongamos que la probabilidad de que un dígito sea el que se haya modificado en el estado anterior es equiprobable:
((2/3 * 3 movimientos) + (1/3 * 2 movimientos)) * (2^2*3)) * 8 = (2.66) * 96 = 256

Caso 3: Un dígito es 0 o 9 y dos son 0<x<9
0xx,9xx,x0x,x9x,xx0,xx9
(Variaciones con repeticion de 2 elementos tomados de 1 en 1 por 3 casos)
((2/3 * 3 movimientos) + (1/3 * 4 movimientos)) * (2*3) * 8^2 = (3.333)* 384 = 1280 

Caso 4: Los tres dígitos son 0<x<9
(Variaciones con repetición de 8 elementos tomados de 3 en 3)
4 movimientos * 8^3 = 4 * 512 = 2048

Casos totales = 1000

b = (16 + 256 + 1280 + 2048)/1000 = 3.6

Este resultado resulta lógico puesto que lo más probable es que el estado actual se encuentre en el "interior" del rango de números donde el número de movimientos es 4, así que es normal que la media de estados se situe cerca de este.

Ahora intentemos aproximar el número medio de profundidades que le llevará al algoritmo de busqueda en anchura para encontrar una solución. Ya que son todos casos equiprobables calcularemos el caso más desfavorable y dividiremos esa profundidad entre 2.
Supongamos estado inicial 000 y estado meta 999. Uno de los caminos óptimos sería:
000 -> 001 -> 011 -> 111 -> 112 ...
que son 9 + 9 + 9 = 27 movimientos -> 27 niveles de profundidad.
Si tomamos como media de pasos es el más desfavorable entre dos tenemos que 27/2 ~= 14 niveles de media, por lo que en memoria tendriamos almacenados aproximadamente 3.6^14 = 6.14 * 10^7 estados.

COMPLETITUD

Antes de analizar esta característica sobre los algoritmos de búsqueda que nos ocupan, debemos analizar que si dados un estado inicial y otro meta cualquiera podremos siempre obtener una solución. Sin las restricciones es obvio que podremos llegar siempre al estado meta desde cualquier estado inicial con las operaciones que se nos permiten. La restricción de no modificar un dígito dos veces consecutivas tampoco es un impedimento. Un ejemplo: 
	Estamos en el estado 345, el meta es el 346 y acabamos de modificar las unidades. Una de las posibles soluciones sería 345 -> 335 -> 336 -> 346. Intuitivamente vemos que esta técnica se puede aplicar en cualquier situación.
La única forma en la que no podríamos llegar a un estado meta es que éste pertenezca al conjunto de los números prohibidos.
Usando la búsqueda en anchura y suponiendo que el estado final no está en el conjunto de números prohibidos, siempre vamos a encontrar una solución y va a ser óptima. Con busqueda en profundidad también encontraremos siempre una solución si garantizamos que el algoritmo no va a entrar en un bucle, pero en este caso la solución no tiene porqué ser óptima.

CONCLUSIONES

Lo más óptimo sería utilizar busqueda en anchura, ya que nos garantiza encontrar siempre un camino óptimo y en un tiempo razonablemente corto. Sin embargo, estamos sujetos a la disponibilidad de recursos de memoria para usar este algoritmo:
	Cada uno de los dígitos es un número de 0 a 9 y se puede expresar con 4 bits. Por lo tanto cada estado ocuparía en memoria 3*4 = 12 bits = 1.5 Bytes. En el caso medio de 14 profundidades con ramificación efectiva de 3.6, esto se traduciría en un tamaño medio en memoria de 3.6^14 * 1.5 = 87.84 MB, y eso sin contar el tamaño ocupado por los punteros y demás variables del programa. Esto aún podría ser asumible, pero en el peor caso de 27 profundidades ocuparía 3.6^27 * 1.5 = 1.395 PetaBytes, algo inalcanzable.

Por lo tanto, aparte de estar sujetos a la disponibilidad de memoria, debemos controlar tambien este consumo de recursos y limitar el número de profundidades. Si el algorimo de busqueda en anchura no consigue un solución antes de llegar al límite de consumo de recursos, entonces es cuando se debe acudir al algoritmo de busqueda en profundidad.



  

