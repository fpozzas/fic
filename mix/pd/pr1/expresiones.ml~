# 2 + 5 * 3;;
# 2+5*3;;
(Da como resultado el entero 17)
- : int = 17
(Los espacios en blanco no afectan a la expresion)

# 2 - 2.0;;
(Se esperaría el resultado 4)
This expression has type float but is here used with type int
(Da error porque no podemos operar enteros con flotantes)

# 3+2;;
(Entero 5)
- : int = 5

# 3.0-2.0;;
(Se esperaría el flotante 5.0)
This expression has type float but is here used with type int
(No podemos utilizar el signo + para sumar flotantes)

# 3.0+.2.0;;
(Se esperaría el flotante 5.0)
- : float = 5.
(El operador para sumar flotantes es el +. )

# 5 / 3;;
(Se esperaría un resultado con parte decimal al no ser exacta la division)
- : int = 1
(Solo da como resultado la parte entera de la division)

# 5 mod 3;;
(Se espera el entero 2, que es 5 en modulo 3)
- : int = 2

# 3.0 *. 2.0 ** 3.0;;
- : float = 24.
(La expresion seria 3 por 2 al cubo. Para flotantes tambien es valido el operador ** )

# 3.0 = float_of_int 3;;
- : bool = true
(Comprueba si la igualdad es cierta, y en este caso lo es, ya que compara las partes decimales de ambos valores, 0 en este caso)

# int_of_float  2.1 + int_of_float (-2.9);;
- : int = 0
(Opera solamente con la parte entera de los flotantes gracias al indentificador int_of_float)

# truncate 2.1 + truncate (-2.9);;
- : int = 0
(Equivalente al anterior, truncate elimina la parte decimal)

# floor 2.1 +. floor (-2.9);;
- : float = -1.
(floor redondea al entero menor o igual más cercano al flotante))

# ceil 2.1 +. ceil (-2.9);;
- : float = 1.
(ceil redondea al entero mayor o igual más cercano al flotante)

# 'B';;
- : char = 'B'
(Indica que B es un caracter)

# int_of_char 'A';;
- : int = 65
(int_of_char saca el entero asociado a ese caracter en el código ASCII)

# char_of_int 66;;
- : char = 'B'
(char_of_int devuelve el caracter asociado a ese entero en el código ASCII)

# Char.code 'B';;
- : int = 66
# Char.chr 67;;
- : char = 'C'
(int_of_char es equivalente a Char.code y char_of_int a Char.chr)

# Char.chr (Char.code 'a' - Char.code 'A' + Char.code 'Ñ');;
- : char = '\241'
(No da el caracter porque no existe el caracter 241 en el código ASCII)

# Char.uppercase 'ñ';;
- : char = '\209'
# Char.lowercase 'O';;
- : char = 'o'
(Char.uppercase da el caracter en mayusculas, y Char.lowecase en minusculas. Con 'ñ' no funciona correctamente porque esta considerado un caracter especial en el codigo ASCII y no como un caracter normal del alfabeto)

# "this is a string";;
- : string = "this is a string"
(Da una cadena de caracteres)

# String.length "longitud";;
- : int = 8
(Saca el numero de caracteres de los que se compone la cadena)

# "1999" + 1;;
This expression has type string but is here used with type int
# "1999" + "1";;
This expression has type string but is here used with type int
# "1999" ^ "1";;
- : string = "19991"
(No podemos sumar cadenas con +, el operador que se utiliza es ^ . Las cadenas siempre deben ir entre comillas)

# int_of_string "1999" + 1;;
- : int = 2000
# string_of_int 010;;
- : string = "10"
(int_of_string pasa la cadena a entero y string_of_int de entero a cadena)

# true;;
- : bool = true
# not true;;
- : bool = false
# true && false;;
- : bool = false
# true || false;;
- : bool = true
# true or false;;
- : bool = true
(Operaciones con booleanos. not niega la expresion, && es la intersección o "y", || es la unión o "o". or es equivalente a || )

# 1 < 2;;
- : bool = true
# (1 < 2) = false;;
- : bool = false
# "1" < "2";;
- : bool = true
# 2< 12;;
- : bool = true
# "2" < "12";;
- : bool = false
# "uno" < "dos";;
- : bool = false
(Comparaciones con los operadores < y > . Podemos comparar enteros y cadenas. Las cadenas comparan respecto al valor numerico de sus caracteres en el código ASCII, no comparan su longitud)
